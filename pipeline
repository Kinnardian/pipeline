#!/usr/bin/env arc

(= defaultDir "pipelines/")
    (def createPipeline (name stacks)
         ;(ero "Creating new pipeline: " name)
         ;(ero "with stacks: " stacks)
         (let  p (map [list (sym _) '(nil)] stacks)
            (push '(seq 0) p)
            (save-file p (string (pwd) defaultDir name))))

    (def listPipelines (pipelineLocation)
        (prn "listing pipelines")
        (if pipelineLocation 
            (pr (dir pipelineLocation))
            (pr (dir defaultDir))))

    (def getPipeline (name)
        (fromfile (+ defaultDir name)
            (= p (read))
                (for n 1 (<= len.p) ++.n
                    (pr p.n.0)
                    (prn "\n____")
                    (if p.n.1
                        (each i p.n.1
                            (if i (prn i!cont))))
                    (prn))))

    ;stacks
    ;   (def createStack (name))
    ;   (def getStack(name))

    (def createItem (pipeline-loc stack-name i)
        (if i
            (if stack-name 
                (do 
                    (tofile pipeline-loc
                        (fromfile pipeline-loc
                            (= p (read))
                            (for n 1 (<= len.p) ++.n
                              (ero "checking stack " p.n.0)
                              (when (iso p.n.0 sym.stack-name)
                                 (ero "appending " i " to " p.n.0)
                                (push { id (++ p.0.1) cont i  done '(nil)} p.n.1)
                                (write p)

                                (break))
                              (prn)))))
                (do (ero "no stack-name")))
            (do (ero "You didn't supply an item"))))
    ;   (def getItem (nameOrId))
    (def deleteItem (pipeline-loc d)
        (tofile pipeline-loc
            (fromfile pipeline-loc
                (whiler stack (read) eof
                    (let (name . items) stack
                        (ero "checking stack " name)
                        (pull d stack)
                        (write stack))))))

    ;movements
    (def moveItem (pipeline-loc to i)
        (deleteItem pipeline-loc i)
        (createItem pipeline-loc to i)
    )

(def pipelineval (expr)
    (let (command . args) (tokens expr)
        ;(prn "command: " (car expr))
        ;(prn "arguments: " cdr.expr)
        (case command
            "createPipeline" (createPipeline car.args cdr.args)
            "ncreatePipeline" (ncreatePipeline car.args cdr.args)
            "listPipelines" (listPipelines car.args)
            "getPipeline" (getPipeline car.args)
            "ngetPipeline" (ngetPipeline car.args)
            "createStack" (prn "unimplement")
            "getStack" (prn "unimplemented")
            "createItem" (createItem (+ defaultDir (args 0)) (args 1) (string (intersperse  #\space (nthcdr 2 args))))
            "ncreateItem" (ncreateItem (+ defaultDir (args 0)) (args 1) (string (intersperse  #\space (nthcdr 2 args))))
            "getItem" (prn "unimplemented :(")
            "deleteItem" (deleteItem (+ defaultDir (args 0)) (string (intersperse  #\space cdr.args)))
            "moveItem" (moveItem (+ defaultDir (args 0)) (args 1) (string (intersperse  #\space (nthcdr 2 args))))

            (do (ero "command not found")
            (ero "usage: pipeline <command> <args>...")))))
(def prepl ()
    (disp "\npipeline< ")
    (= expr (readline))
    (pipelineval expr)
    (prepl))

(def topLevel (argv)
    (case cdr.argv
        nil (prepl)
        (pipelineval cdr.argv)))
(topLevel argv)
